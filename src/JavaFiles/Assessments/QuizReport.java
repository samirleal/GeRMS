/*
 * Team name: GeRMS
 * Team members: Gustavo Moraes, Ryan Ahearn, Mark Morabito, and Samir Leal
 * Date: 04/30/15
 * Purpose: In this project, you and your partners will work to write a program to 
 * create a Math Tutor Software System to help elementary school students.
 *
 * This software will help elementary school students to study and practice math skills.
 *
 * The math curriculum information in Massachusetts is in following link: 
 * http://www.doe.mass.edu/frameworks/math/2000/toc.html
 *
 * The client requests following features as minimum:
 *     practice test materials
 *     tutorials
 *     printing the record(test results)
 *     different level tests for each grade
 *     security(log-in, log-out)
 *     Reward
 *
 */
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

import java.awt.print.PrinterException;
import java.text.DecimalFormat;
import javax.swing.*;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Samir
 */
public class QuizReport extends javax.swing.JInternalFrame {

    // Main class
    private Main main;
    
    // Results
    private int[] results;
    
    // Grade
    private int grade;
    
    // Difficulty
    private int difficulty;
    
    // Standards
    private String[] standards;
    
    // ImageIcons for the checkmark and red x
    private ImageIcon incorrectImageIcon;
    private ImageIcon correctImageIcon;
    
    // Default table model
    DefaultTableModel tableModel;
    
    /**
     * Creates new form QuizReport
     */
    public QuizReport(Main m, int[] r, int g, int d, String[] s) {
        
        // Initializes the components
        initComponents();
        
        // Reference to the main class
        main = m;
        
        // Stores the results
        results = r;
        
        // Stores the grade
        grade = g;
        
        // Stores the difficulty
        difficulty = d;
        
        // Stores the standards
        standards = s;
        
        // ImageIcons for the correct, and incorrect buttons
        incorrectImageIcon = new ImageIcon(getClass().getResource("Images/QuizReport/X.png"));
        correctImageIcon = new ImageIcon(getClass().getResource("Images/QuizReport/Checkmark.png"));
        
        displayResults();
        
        // Gets the dimension of the main desktop pane
        Dimension desktopSize = main.getDesktopPaneDimension();
                
        // Gets the size of this JInternalFrame
        Dimension jInternalFrameSize = this.getSize();
        
        // Centers this JInternalFrame in the DesktopPane
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);
        
    }
    
    public void displayResults() {
        
        if (results[0] == 0) {
            jLabel8.setIcon(incorrectImageIcon);
        } else {
            jLabel8.setIcon(correctImageIcon);
        }
        
        if (results[1] == 0) {
            jLabel9.setIcon(incorrectImageIcon);
        } else {
            jLabel9.setIcon(correctImageIcon);
        }

        if (results[2] == 0) {
            jLabel10.setIcon(incorrectImageIcon);
        } else {
            jLabel10.setIcon(correctImageIcon);
        }

        if (results[3] == 0) {
            jLabel11.setIcon(incorrectImageIcon);
        } else {
            jLabel11.setIcon(correctImageIcon);
        }

        if (results[4] == 0) {
            jLabel12.setIcon(incorrectImageIcon);
        } else {
            jLabel12.setIcon(correctImageIcon);
        }

        if (results[5] == 0) {
            jLabel13.setIcon(incorrectImageIcon);
        } else {
            jLabel13.setIcon(correctImageIcon);
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        helpAudioButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Quiz Report");
        setToolTipText("Quiz Report");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel1.setText("1");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel2.setText("2");

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel3.setText("4");

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel4.setText("3");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel5.setText("6");

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel6.setText("5");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/RegisterScreen/goButton.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MainScreen/printer.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/QuizReport/Checkmark.png"))); // NOI18N

        helpAudioButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AudioButton.png"))); // NOI18N
        helpAudioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAudioButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpAudioButton1))
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(helpAudioButton1)
                                .addGap(39, 39, 39)))
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addGap(20, 20, 20)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Called when the go button is pressed
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Determines which grade module to go to next
        // Grade 0 is PREKK
        // Grade 1 is Grades1and2
        // Grade 2 is Grades3and4
        if (grade == 0) {
            // Opens the PreKK screen
            main.openPreKK();
        } else if (grade == 1) {
            // Opens the Grades1and2 screen
            main.openGrades1and2Module();
        } else if (grade == 2) {
            // Opens the Grades3and4 screen
            main.openGrades3and4Module();            
        }
        
        // Disposes this screen
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void helpAudioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpAudioButton1ActionPerformed
         /*
        * This is the code to play the audio tutorial .wav file.
        */

        // Creates a File object that is linked the QuizReport.wav filepath
        File yourFile = new File("src/Sounds/QuizReport.wav");

        AudioInputStream stream;
        AudioFormat format;
        DataLine.Info info;
        Clip clip;

        // A try/catch block to play the .wav file
        try {
            stream = AudioSystem.getAudioInputStream(yourFile);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
            clip.start();
        } catch (UnsupportedAudioFileException | IOException ex) {
            Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpAudioButton1ActionPerformed

    // Called when the printer button is pressed
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        // Text area that is used to write the report to
        JTextArea textArea = new JTextArea();
        
        // Sets the font
        textArea.setFont(new Font("monospaced", Font.PLAIN, 12));
        
        // Gets the current date in MM-dd-yyyy format
        Date d = new Date();
        String date = new SimpleDateFormat("MM-dd-yyyy").format(d);
        
        // Used to store either PreK-K, Grades 1 and 2, or Grades 3 and 4
        String grade = "";
        
        // Stores the grade in the above String
        switch (this.grade) {
            case 0:
                grade = "PreK-K";
            break;
            
            case 1:
                grade = "Grades 1 and 2";
            break;
                
            case 2:
                grade = "Grades 3 and 4";
            break;
                
            default:
                grade = "";
            break;
                
        }
        
        // Used to store either Easy, Medium, or Hard
        String difficulty = "";

        // Stores the difficulty in the above String
        switch (this.difficulty) {
            
            case 1:
              difficulty = "Easy";  
            break;
                
            case 2:
                difficulty = "Medium";
            break;
                
            case 3:
                difficulty = "Hard";
            break;
            
            default:
                difficulty = "";
            break;
                
        }
        
        // Used to store either Incorrect/Correct for all questions
        String[] results = new String[this.results.length];
        
        // Used to store the score on the assessment
        double score = 0;
        
        // Gets the score and stores incorrect/correct in the above String array
        for (int i = 0; i < this.results.length; i++) {
            
            // Adds one or zero to the score
            score += this.results[i];
            
            switch (this.results[i]) {
                
                case 0:
                    results[i] = "Incorrect";
                break;
                    
                case 1:
                    results[i] = "Correct";
                break;
                
                default:
                    results[i] = "";
                break;
                    
            }
        }
        
        // Stores the score as a double from 0-100
        score = (score * 100) / 6;
        
        DecimalFormat df = new DecimalFormat("###");
        
        String scoreFormatted = df.format(score);
        
        // Used to store the standards asked on the assessment as a String
        String[] standards = new String[this.standards.length];
        
        // Stores the standards asked as a String array
        for (int i = 0; i < this.standards.length; i++) {
            
            switch (this.standards[i]) {
                
                case "KN1":
                    standards[i] = "Counting";
                break;
                
                case "KN2":
                    standards[i] = "Matching";
                break;
                    
                case "KN3":
                    standards[i] = "Position of an Object";
                break;
                
                case "KN4":
                    standards[i] = "Comparing Groups of Objects";
                break;
                    
                case "KN5":
                    standards[i] = "Half and Whole";
                break;
                
                case "KN6":
                    standards[i] = "Identify Coins";
                break;
                    
                case "KN7":
                    standards[i] = "Math with Drawings";
                break;
                
                case "KN8":
                    standards[i] = "Estimate";
                break;
                    
                case "2N4":
                    standards[i] = "Comparing Numbers";
                break;
                
                case "4N12":
                    standards[i] = "Math with Large Numbers";
                break;
                    
                default:
                    standards[i] = "";
                break;
                
            }
            
        }
        
        // Text that goes above the data from the assessment
        String headings = ""
                + "Username: " + main.getUsername() + "\n"
                + "Date: " + date + "\n"
                + "Grade: " + grade + "\n"
                + "Assessment Type: Quiz" + "\n"
                + "Difficulty: " + difficulty + "\n"
                + "Score: " + scoreFormatted + "\n\n";
        
        // Determine which row has the longest standard name (for spacing purposes)
        int standardLength = 0;
        for (int i = 0; i < standards.length; i++) {
            if (standards[i].length() > standardLength) {
                // Stores the largest length
                standardLength = standards[i].length();
            }
        }
        
        // Used to store the spaces as a String that go after the second column text
        String[] spacesForSecondColumn = new String[standards.length];
        
        // Instantiates the spacesForSecondColumn array
        for (int i = 0; i < spacesForSecondColumn.length; i++) {
            spacesForSecondColumn[i] = "";
        }
        
        // Determines the number of spaces needed after the second column for each row
        // Then stores the spaces in an array
        for (int i = 0; i < standards.length; i++) {
            int spacesNeededForSecondColumn = standardLength - standards[i].length();
            for (int j = 0; j < spacesNeededForSecondColumn; j++) {
                spacesForSecondColumn[i] += " ";
            }
            spacesForSecondColumn[i] += "             ";
        }
        
        // Number of spaces after the Type column
        int numberOfSpacesAfterSecondColumn = (standardLength-4) + 8;
        
        // Column headings for the data table
        String columnHeadings = String.format("Question #         Type%"+numberOfSpacesAfterSecondColumn+"s"+"Correct/Incorrect" + "\n", "");
        
        // Loops through each element in the results array
        // adding one row of data to the string each time
        String data = "";
        for (int i = 0; i < standards.length; i++) {
            numberOfSpacesAfterSecondColumn = (standardLength-standards[i].length()) + 8;
            if (i < 9) {
                data += String.format((i+1) + "                  " + standards[i] + "%"+numberOfSpacesAfterSecondColumn+"s" + results[i] + "\n", "");
            } else {
                data += String.format((i+1) + "                 " + standards[i] + "%"+numberOfSpacesAfterSecondColumn+"s" + results[i] + "\n", "");                
            }
        }
        
        // Sets the textArea with the print preview text
        textArea.setText(headings + columnHeadings + data);
        
        // Makes the textArea not editable
        textArea.setEditable(false);
        
        // Displays a print preview
        JOptionPane.showMessageDialog(null, textArea, "Print Assessment Preview", JOptionPane.PLAIN_MESSAGE);

        // Attempts to send a print job
        try {
            boolean complete = textArea.print(null, null, true, null, null, true);
            if (complete) {
                /* show a success message  */

            } else {
                /*show a message indicating that printing was cancelled */

            }
        } catch (PrinterException pe) {
            /* Printing failed, report to the user */

        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    // Called when the interal frame closes
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed

        // We must set this variable to false so it can be opened again
        main.setIsQuizReportScreenOpen(false);
        
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton helpAudioButton1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
