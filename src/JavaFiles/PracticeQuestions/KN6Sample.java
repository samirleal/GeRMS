/*
 * Team name: GeRMS
 * Team members: Gustavo Moraes, Ryan Ahearn, Mark Morabito, and Samir Leal
 * Date: 04/30/15
 * Purpose: In this project, you and your partners will work to write a program to 
 * create a Math Tutor Software System to help elementary school students.
 *
 * This software will help elementary school students to study and practice math skills.
 *
 * The math curriculum information in Massachusetts is in following link: 
 * http://www.doe.mass.edu/frameworks/math/2000/toc.html
 *
 * The client requests following features as minimum:
 *     practice test materials
 *     tutorials
 *     printing the record(test results)
 *     different level tests for each grade
 *     security(log-in, log-out)
 *     Reward
 *
 */
import java.util.ArrayList;
import java.util.Random;
import java.awt.Dimension;
import javax.swing.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ryan Ahearn
 */
public class KN6Sample extends JInternalFrame{
    
    //array to hold values of pictures for the problems, 0-12 (ascends on difficulty)
    private ArrayList<String> Sequence;
    
    //array to hold possible answer
    private ArrayList<String> AnsArray = new ArrayList<String>();
    
     private String correctAnswer;
    private String ans1;
    private String ans2;
    private String ans3;
    private String ans4;
    private String ans5;
    private String ans6;
    
    private final String qustion = "The name of this coin(s) is? ";
    Random rand = new Random();
    
    
    
    //Reference to main class
    private Main main;
    
    //Variable for storing correct answer
    private int answer;
    
    //Random number for question decision
    private int questionNum;
    
    //ImageIcon for question
    private ImageIcon questionIcon = new ImageIcon();
    private int questionCount = 1;
    
    //Image Icon for correct answer
    private ImageIcon correctImageIcon;
    //Image Icon for incorrect answer
    private ImageIcon incorrectImageIcon;
    //Image Icon for neutral answer
    private ImageIcon neutralImageIcon;
    //TODO   Generate array with image paths
    
    //Boolean to restrit the user to one submission per question
    private boolean answerSubmitted = false;
    
               
    
        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Coin identification: Easy Practice Question");
        setToolTipText("Coin identification Practice Questions");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setBackground(new java.awt.Color(230, 126, 34));
        jButton1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PracticeScreens/AnswerNeutral.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(230, 126, 34));
        jButton3.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PracticeScreens/AnswerNeutral.jpg"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PreKK/RightArrow.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabel2.setText("1/3");

        jButton2.setBackground(new java.awt.Color(230, 126, 34));
        jButton2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PracticeScreens/AnswerNeutral.jpg"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(230, 126, 34));
        jButton4.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/PracticeScreens/AnswerNeutral.jpg"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 28)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton5)
                            .addGap(30, 30, 30))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(14, 14, 14)))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>                        

    // This method centers this form in the middle of the screen
    public void centerOnScreen() {
        
         // Gets the dimension of the main desktop pane
        Dimension desktopSize = main.getDesktopPaneDimension();
                
        // Gets the size of this JInternalFrame
        Dimension jInternalFrameSize = this.getSize();
        
        // Centers this JInternalFrame in the DesktopPane
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);
        
    }
    
    // This method is called when the top left answer button is clicked
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         

    }                                        

    // This method is called when the lower left answer button is clicked
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        // If the user has not submitted an answer
        if (!answerSubmitted) {

            // If the value assigned to this button is the correct answer
            if (answer == 0) {

                // Display the correct answer image
                jButton3.setIcon(correctImageIcon);

            } else {

                // Display the incorrect answer image
                jButton3.setIcon(incorrectImageIcon);

            }

            // Prevents the user from submitting another answer
            answerSubmitted = true;

        } else {

            // Display a message
            JOptionPane.showMessageDialog(null, "Click the blue arrow to continue", "Next", JOptionPane.INFORMATION_MESSAGE);

        }

    }                                        

    // This method is called when the blue right arrow is clicked
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        // Allows the user to submit an answer
        answerSubmitted = false;

        // Increments the questionCount
        questionCount++;

        // String for the title of this form
        String title = "";

        // If the current question number is the second question
        if (questionCount == 2) {

            // Resets the ImageIcons of the JButtons on the screen to neutral
            jButton1.setIcon(neutralImageIcon);
            jButton2.setIcon(neutralImageIcon);
            jButton3.setIcon(neutralImageIcon);
            jButton4.setIcon(neutralImageIcon);

            // Generate a medium question
            getMQuestion();

            // Title of the form
            title = "Sequential Order: Medium Practice Question";

        } else if (questionCount == 3) {

            // Resets the ImageIcons of the JButtons on the screen to neutral
            jButton1.setIcon(neutralImageIcon);
            jButton2.setIcon(neutralImageIcon);
            jButton3.setIcon(neutralImageIcon);
            jButton4.setIcon(neutralImageIcon);

            // Generate a hard question
            getHQuestion();

            // Title of the form
            title = "Sequential Order: Hard Practice Question";

        } else {

            // Display a message
            JOptionPane.showMessageDialog(null, "You are done with the practice questions for Identifying Coins.\nClick ok to continue.", "Practice", JOptionPane.INFORMATION_MESSAGE);

            // Closes this screen
            this.dispose();

            main.setIsKN6ScreenOpen(false);

            // Opens the PreKK module
            main.openPreKK();

        }

        // Sets the question questionCount on the screen
        jLabel2.setText(questionCount+"/3");

        // Sets the title of the form
        this.setTitle(title);

    }                                        

        
        
        // This method is called hwen the top right answer button is clicked
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         

    }                                        

    // This method is called when the lower right answer button is clicked
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        // If the user has not submitted an answer
        if (!answerSubmitted) {

            // If the value assigned to this button is the correct answer
            if (answer == 1) {
                // Display the correct answer image
                jButton4.setIcon(correctImageIcon);

            } else {
                // Display the incorrect answer image
                jButton4.setIcon(incorrectImageIcon);

            }

            // Prevents the user from submitting another answer
            answerSubmitted = true;

        } else {

            // Display a message
            JOptionPane.showMessageDialog(null, "Click the blue arrow to continue", "Next", JOptionPane.INFORMATION_MESSAGE);

        }

    }                                        

    // This method is called when the form is closed
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {                                         
    
        // Sets the variable to false (which means that this form is closed)
        main.setIsKN3ScreenOpen(false);
        
    }                                        

    
     public KN6Sample(Main m){
        //initializing the Problem array with zeroes
      /* Sequence = new ArrayList<>();
       for( int i=0; i<13;i++){
            
            Sequence.add(""+i);
        }    
              */
         
         // Initializes the components
        initComponents();
        
        // Sets the reference to the main class
        main = m;
        
        // Centers the JInternalFrame on the screen
        centerOnScreen();
        
        // ImageIcons for the neutral, correct, and incorrect buttons
        neutralImageIcon = new ImageIcon(getClass().getResource("Images/PracticeScreens/AnswerNeutral.jpg"));
        correctImageIcon = new ImageIcon(getClass().getResource("Images/PracticeScreens/AnswerCorrect.jpg"));
        incorrectImageIcon = new ImageIcon(getClass().getResource("Images/PracticeScreens/AnswerIncorrect.jpg"));
        
    
    // Generates an easy question on the screen
        getEQuestion();
        
        
         // Disables the last button for Easy Question
        jButton4.setVisible(false);
        
    
         
    }
    
       //get Easy Question  Penny Nickel or Dime
    public String getEQuestion(){
       ArrayList<String> images = null;
        
        images.add("/Images/PracticeScreens/KN6/penny.png");
        images.add("/Images/PracticeScreens/KN6/nickel.png");
        images.add("/Images/PracticeScreens/KN6/dime.png");
        
        
    questionNum = rand.nextInt(3);
        
        //Answers to the questions
        String[] correctAnswers = {"Penny", "Nickel", "Dime"};
        
        // Sets the icon to the randomly chosen question
        questionIcon = new ImageIcon(getClass().getResource(images.get(questionNum)));
       AnsArray.removeAll(AnsArray);
        
        AnsArray.add("A Penny");
        AnsArray.add("A Nickel");
        AnsArray.add("A Dime");
        
        
        
       // shuffleList(images, 0, 2);
        correctAnswer = AnsArray.get(questionNum);
        //removefromsequence();
        
        ans1 = correctAnswer + "";
        AnsArray.add("" + correctAnswer);
        return correctAnswer;
    }
    
    //Get Medium Question  All Coins
    public String getMQuestion(){
        ArrayList<String> images = null;
        
        images.add("/Images/PracticeScreens/KN6/penny.png");
        images.add("/Images/PracticeScreens/KN6/nickel.png");
        images.add("/Images/PracticeScreens/KN6/dime.png");
        images.add("/Images/PracticeScreens/KN6/quarter.png");
        
        
    questionNum = rand.nextInt(4);
        
        //Answers to the questions
        String[] correctAnswers = {"Penny", "Nickel", "Dime","Quarter"};
        
        // Sets the icon to the randomly chosen question
        questionIcon = new ImageIcon(getClass().getResource(images.get(questionNum)));
       AnsArray.removeAll(AnsArray);
        
        AnsArray.add("A Penny");
        AnsArray.add("A Nickel");
        AnsArray.add("A Dime");
        AnsArray.add("A Quarter");
        
        
        
       // shuffleList(images, 0, 2);
        correctAnswer = AnsArray.get(questionNum);
        //removefromsequence();
        
        ans1 = correctAnswer + "";
        AnsArray.add("" + correctAnswer);
        return correctAnswer;
    }
    
    //Get Hard Question
     public String getHQuestion(){
         ArrayList<String> images = null;
        
        images.add("/Images/PracticeScreens/KN6/penny.png");
        images.add("/Images/PracticeScreens/KN6/nickel.png");
        images.add("/Images/PracticeScreens/KN6/dime.png");
        images.add("/Images/PracticeScreens/KN6/quarter.png");
        images.add("/Images/PracticeScreens/KN6/halfdollar.png");
        
        
    questionNum = rand.nextInt(5)+1;
        
        //Answers to the questions
        String[] correctAnswers = { "Nickel", "Dime","Quarter","Half Dollar"};
        
        // Sets the icon to the randomly chosen question
        questionIcon = new ImageIcon(getClass().getResource(images.get(questionNum)));
       AnsArray.removeAll(AnsArray);
        
        AnsArray.add("A Penny");
        AnsArray.add("A Nickel");
        AnsArray.add("A Dime");
        AnsArray.add("A Quarter");
        AnsArray.add("A Half Dollar");
        
        
        
       // shuffleList(images, 0, 2);
        correctAnswer = AnsArray.get(questionNum);
        //removefromsequence();
        
        ans1 = correctAnswer + "";
        AnsArray.add("" + correctAnswer);
        return correctAnswer;
    }
    
    public void fillChoices() {
        
        /*
        * A String array with four elements is used to store the possible answers
        */
        
           
      
        
        // Sets the text of the four JButtons with the choices for answers
        jButton1.setText("A Penny");
        jButton2.setText("A Nickel");
        jButton3.setText("A Dime");
        jButton4.setText("A Quarter");

    }
    
     public void fillChoicesH() {
        
        /*
        * A String array with four elements is used to store the possible answers
        */
        
           
      
        
        // Sets the text of the four JButtons with the choices for answers
        
        
        jButton1.setText("A Nickel");
        jButton2.setText("A Dime");
        jButton3.setText("A Quarter");
        jButton4.setText("A Half Dollar");
    }
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    
    /*private void removefromsequence()
    {
        
        for (int i = 0; i< Sequence.size();i++) 
        {
            if (correctAnswer == Integer.parseInt(Sequence.get(i)))
            {
                Sequence.remove(i);
            }
            
        }
        
    }
    */
    //Iterates through the array to shuffle all contents
    public static void shuffleList(ArrayList<String> a, int start, int end)
    {
        int n = end;
        Random ran = new Random();
       
        for(int i = start; i<n; i++)
        {
            int change = i + ran.nextInt(n - i);
            swap(a, i, change);
        }
    }
    
    //Swaps the values of two array indexes
    private static void swap(ArrayList<String> a, int i, int change)
    {
        String helper = a.get(i);
        a.set(i, a.get(change));
        a.set(change, helper);
    }
    
    //Looks for duplicates in the sequence
    private boolean AlreadyInSequence(int number)
    {
        boolean indicator = false;
        for(int i=0; i<AnsArray.size()-1; i++)
        {
            if(number == Integer.parseInt(AnsArray.get(i)))
                indicator = true;
            
        }
        return indicator;
    }
    
    public String getAns1()
  {
      return ans1;
  }
  public String getAns2()
  {
      return ans2;
  }

  public String getAns3()
  {
      return ans3;
  }

  public String getAns4()
  {
      return ans4;
  }
    
}
