/*
 * Team name: GeRMS
 * Team members: Gustavo Moraes, Ryan Ahearn, Mark Morabito, and Samir Leal
 * Date: 04/30/15
 * Purpose: In this project, you and your partners will work to write a program to 
 * create a Math Tutor Software System to help elementary school students.
 *
 * This software will help elementary school students to study and practice math skills.
 *
 * The math curriculum information in Massachusetts is in following link: 
 * http://www.doe.mass.edu/frameworks/math/2000/toc.html
 *
 * The client requests following features as minimum:
 *     practice test materials
 *     tutorials
 *     printing the record(test results)
 *     different level tests for each grade
 *     security(log-in, log-out)
 *     Reward
 *
 */
import java.awt.Dimension;
import java.io.*;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.*;

import java.sql.*;
import java.util.Properties;
import javax.swing.*;

/*
* This is the class for the register JInternalFrame screen.
* This screen allows the user to input their information then click the register button
* The user is submitted to the database if the username does not already exist.
*/
public class Register extends JInternalFrame {
   
   // Stores a reference to the Main class
   Main main;
    
   // Variables needed to make connection with DB
   private static final String dbClassName = "com.mysql.jdbc.Driver";
   private static final String CONNECTION = "jdbc:mysql://localhost/germs";     
    
    /**
     * Creates new form RegisterFixed
     */
    public Register(Main m) {
        
        // Initializes the components on the JInternalFrame
        initComponents();
        
        // Stores the reference to the main class
        main = m;
        
        // Populates the security questions comboxbox
        populateComboBox();
        
        // Gets the dimension of the main desktop pane
        Dimension desktopSize = main.getDesktopPaneDimension();
                
        // Gets the size of this JInternalFrame
        Dimension jInternalFrameSize = this.getSize();
        
        // Centers this JInternalFrame in the DesktopPane
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);        
        
    }
    
    public void populateComboBox() {
        
        // A try/catch block to access the MySQL database
        try {
            
            // Database Driver
            Class.forName(dbClassName);

            // user/pwd to connect to DB
            Properties p = new Properties();
            p.put("user","GermsAdmin");
            p.put("password","g3rm5p0w3ru53r");

            // DB connection
            Connection conn = DriverManager.getConnection(CONNECTION,p);  
        
            // Get username and password
            Statement stmt = conn.createStatement();
            String sql = "select * from securityquestion;";
            ResultSet rs = stmt.executeQuery(sql);
            
            // Loops through all the elements in the ResultSet
            while (rs.next() == true){
                
                // Adds the security question tot the JComboBox
                securityQuestionsComboBox.addItem(rs.getString("secQuestion"));
                String key = rs.getString("secretKey");
                
            }    
            
            // Closes the connection
            rs.close();
            stmt.close();
            conn.close();

            } catch (ClassNotFoundException e) {

            } catch (SQLException e) {

            }
        
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        helpAudioButton = new javax.swing.JButton();
        firstNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField1 = new javax.swing.JPasswordField();
        passwordLabel2 = new javax.swing.JLabel();
        passwordField2 = new javax.swing.JPasswordField();
        securityQuestionLabel = new javax.swing.JLabel();
        securityQuestionsComboBox = new javax.swing.JComboBox();
        securityAnswerLabel = new javax.swing.JLabel();
        securityAnswerTextField = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Register");
        setToolTipText("Register");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/RegisterScreen/logoRegisterScreen.jpg"))); // NOI18N

        helpAudioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AudioButton.png"))); // NOI18N
        helpAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAudioButtonActionPerformed(evt);
            }
        });

        firstNameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        firstNameLabel.setText("First Name:");

        firstNameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lastNameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        lastNameLabel.setText("Last Name:");

        lastNameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        usernameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        usernameLabel.setText("Username:");

        usernameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        passwordLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        passwordLabel.setText("Password:");

        passwordField1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        passwordLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        passwordLabel2.setText("Re-enter Password:");

        passwordField2.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N

        securityQuestionLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        securityQuestionLabel.setText("Security Question:");

        securityQuestionsComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        securityQuestionsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityQuestionsComboBoxActionPerformed(evt);
            }
        });

        securityAnswerLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        securityAnswerLabel.setText("Security Answer:");

        securityAnswerTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        goButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/RegisterScreen/goButton.png"))); // NOI18N
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(goButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(securityQuestionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(securityAnswerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(securityQuestionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(securityAnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(helpAudioButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(firstNameLabel))
                            .addComponent(passwordLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lastNameTextField)
                                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpAudioButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstNameLabel)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameLabel)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel2)
                    .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(securityQuestionLabel)
                    .addComponent(securityQuestionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(securityAnswerLabel)
                    .addComponent(securityAnswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(goButton)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        setBounds(250, 0, 602, 580);
    }// </editor-fold>//GEN-END:initComponents

    // This method is triggered when the help audio button is pressed
    private void helpAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpAudioButtonActionPerformed

        /*
        * This is the code needed to play a .wav file.
        * The .wav file played is to help the user understand what to do
        * on this register screen.
        */
        
        // Gets the file path to the .wav file
        File yourFile = new File("src/sounds/GeRMSRegister.wav");
        AudioInputStream stream;
        AudioFormat format;
        DataLine.Info info;
        Clip clip;
        
        // A try/catch block to play the .wav file
        try {
            stream = AudioSystem.getAudioInputStream(yourFile);
            format = stream.getFormat();
            info = new DataLine.Info(Clip.class, format);
            clip = (Clip) AudioSystem.getLine(info);
            clip.open(stream);
            clip.start();
        } catch (UnsupportedAudioFileException | IOException ex) {
            Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_helpAudioButtonActionPerformed

    // This is the security questions combox action performed method
    private void securityQuestionsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityQuestionsComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_securityQuestionsComboBoxActionPerformed

    // THis is the action performed method for the go button
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        
        // A try/catch block to get information from the database using SQL
        try {

            // Database Driver
            Class.forName(dbClassName);

            // user/pwd to connect to DB
            Properties p = new Properties();
            p.put("user","GermsAdmin");
            p.put("password","g3rm5p0w3ru53r");

            // DB connection
            Connection conn = DriverManager.getConnection(CONNECTION,p);

            // Get username and password
            String user = usernameTextField.getText();

            // If any of the fields are empty then display a message
            if (user.trim().isEmpty() || firstNameTextField.getText().trim().isEmpty()
                || lastNameTextField.getText().trim().isEmpty()
                || securityAnswerTextField.getText().trim().isEmpty()) {
                
                // Display a message
                JOptionPane.showMessageDialog(null, "Please fill in all the fields.", "Register", JOptionPane.INFORMATION_MESSAGE);
                
            // Else if all of the fields have input then try to submit the user to the database
            } else {

                // A sql statement to get the username
                Statement stmt = conn.createStatement();
                String sql;
                sql = "select * from accounts where accUser = '" + user + "'";
                ResultSet rs = stmt.executeQuery(sql);

                //if user exists, all fields associate to that user from table
                if (rs.next() == true){
                    
                    // Display a message if the user already exists
                    JOptionPane.showMessageDialog(null, "Username already exists!", "Username", JOptionPane.INFORMATION_MESSAGE);
                    
                // If the username does not exist then submit the user to the database
                } else {
                    
                    // Gets the password from the password field
                    char[] pass = passwordField1.getPassword();
                    
                    // String for the password
                    String password1 = "";
                    
                    // Gets the password from the char[] array
                    for (int i = 0; i < pass.length; i++) {
                        password1 += pass[i];
                    }
                    
                    // Gets the second password from the password field
                    char[] pass2 = passwordField2.getPassword();
                    
                    // Used to store the second password
                    String password2 = "";
                    
                    // Gets the password from the second char[] array
                    for (int i = 0; i < pass2.length; i++) {
                        password2 += pass2[i];
                    }
                    
                    // If the passwords match
                    if(password1.equals(password2)){
                        
                        // Encryptor class
                        EncryptionDecryptionAES encryptor = new EncryptionDecryptionAES();
                        
                        // Encrypt the password
                        try {
                            
                         password1 = encryptor.encrypt(password1);
                       
                        } catch(Exception e) {
                            
                        }
                        
                        // Get the other input from the text fields
                        String username = usernameTextField.getText();
                        String firstname = firstNameTextField.getText();
                        String lastname = lastNameTextField.getText();
                        String securityanswer = securityAnswerTextField.getText();
                        String key = encryptor.getKey();
                        
                        // Gets the ID of the selected combo box item
                        int secID = securityQuestionsComboBox.getSelectedIndex() + 1;

                        // Inserts the data into the database
                        sql = "INSERT INTO accounts VALUES('" + username + "','" + password1 + "','" + firstname
                        + "','" + lastname + "','" + secID + "','" + securityanswer + "', '" + key + "');";
                        stmt.executeUpdate(sql);

                        // Displays a message 
                        JOptionPane.showMessageDialog(null, "Registration complete!", "Register", JOptionPane.INFORMATION_MESSAGE);
                        
                        // Closes the register screen
                        this.dispose();
                        
                        // Sets the isRegisterScreenOpen to false
                        main.setIsRegisterScreenOpen(false);

                    // Else if the passwords do not match
                    } else {
                        
                        // Display a message
                        JOptionPane.showMessageDialog(null, "Passwords do not match.", "Password Error", JOptionPane.INFORMATION_MESSAGE);
                        
                    }
                    
                }
                
                // Close all connection to DB
                rs.close();
                stmt.close();

            }
            
            // Closes the connection to the DB
            conn.close();

        } catch (ClassNotFoundException e) {

        } catch (SQLException e) {

        }
        
    }//GEN-LAST:event_goButtonActionPerformed

    // Triggered when the Register screen is closed
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        
        // Sets the boolean variable to false (not open)
        main.setIsRegisterScreenOpen(false);
        
    }//GEN-LAST:event_formInternalFrameClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton goButton;
    private javax.swing.JButton helpAudioButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JPasswordField passwordField1;
    private javax.swing.JPasswordField passwordField2;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel passwordLabel2;
    private javax.swing.JLabel securityAnswerLabel;
    private javax.swing.JTextField securityAnswerTextField;
    private javax.swing.JLabel securityQuestionLabel;
    private javax.swing.JComboBox securityQuestionsComboBox;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

}