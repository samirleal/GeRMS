/*
 * Team name: GeRMS
 * Team members: Gustavo Moraes, Ryan Ahearn, Mark Morabito, and Samir Leal
 * Date: 04/30/15
 * Purpose: In this project, you and your partners will work to write a program to 
 * create a Math Tutor Software System to help elementary school students.
 *
 * This software will help elementary school students to study and practice math skills.
 *
 * The math curriculum information in Massachusetts is in following link: 
 * http://www.doe.mass.edu/frameworks/math/2000/toc.html
 *
 * The client requests following features as minimum:
 *     practice test materials
 *     tutorials
 *     printing the record(test results)
 *     different level tests for each grade
 *     security(log-in, log-out)
 *     Reward
 *
 */
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.sql.*;
import java.util.Base64;
import java.util.Properties;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;

/*
* This is the ForgotPassword JInternalFrame class.
* This class is used to allow the user to quickly retrieve their password upon
* answering the security question linked to their account.
* There is a button to retrieve the security question of the username entered into
* the textfield.
* There also is a button to submit the answer to the security question.
* If the answer is correct then the password will be displayed.
*/
public class ForgotPassword extends JInternalFrame {
    
   // Reference to the Main class
   Main main;
    
   // Variables needed to make connection with DB
   private static final String dbClassName = "com.mysql.jdbc.Driver";
   private static final String CONNECTION = "jdbc:mysql://localhost/germs"; 
   
   // Variables used to store data from the database
   private String securityanswer;
   private String id;
   private String securityquestion;
   private String password;
   
   // Variable to store the username from the text field
   private String user = "";
   
   // Variable that determines if the username exists
   private boolean usernameExists = false;

    /**
     * Creates new form ForgotPassword
     */
    public ForgotPassword(Main m) {
        
        // Initializes the components on the JInternalFrame
        initComponents();
        
        // Stores the reference to the main class
        main = m;
        
        // Gets the dimension of the main desktop pane
        Dimension desktopSize = main.getDesktopPaneDimension();
                
        // Gets the size of this JInternalFrame
        Dimension jInternalFrameSize = this.getSize();
        
        // Centers this JInternalFrame in the DesktopPane
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        getquestionButton = new javax.swing.JButton();
        usernameTextField = new javax.swing.JTextField();
        usernameLabel1 = new javax.swing.JLabel();
        securityquestionTextField = new javax.swing.JTextField();
        usernameLabel2 = new javax.swing.JLabel();
        securityanswerTextField = new javax.swing.JTextField();
        getpasswordButton = new javax.swing.JButton();
        helpAudioButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Forgot Password");
        setToolTipText("Forgot Password");
        setAlignmentX(250.0F);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        usernameLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        usernameLabel.setText("Security Question:");

        getquestionButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getquestionButton.setText("Get Security Question");
        getquestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getquestionButtonActionPerformed(evt);
            }
        });

        usernameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        usernameLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        usernameLabel1.setText("Username:");

        securityquestionTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        securityquestionTextField.setEnabled(false);

        usernameLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        usernameLabel2.setText("Security Answer:");

        securityanswerTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        getpasswordButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getpasswordButton.setText("Get Password");
        getpasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getpasswordButtonActionPerformed(evt);
            }
        });

        helpAudioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/AudioButton.png"))); // NOI18N
        helpAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpAudioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getpasswordButton)
                    .addComponent(getquestionButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(usernameLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(helpAudioButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameLabel)
                                .addComponent(usernameLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(securityanswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(securityquestionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(usernameLabel1)
                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(helpAudioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getquestionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(securityquestionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel2)
                    .addComponent(securityanswerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getpasswordButton)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        setBounds(170, 15, 610, 320);
    }// </editor-fold>//GEN-END:initComponents

    // This method is triggered when the help audio button is clicked
    private void helpAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpAudioButtonActionPerformed
        
        // Code to play the .wav file
        File yourFile = new File("src/Sounds/GeRMSForgotPassword.wav");
        AudioInputStream stream;
        AudioFormat format;
        DataLine.Info info;
        Clip clip;

        // A Try/catch block to play the audio file
            try {
                stream = AudioSystem.getAudioInputStream(yourFile);
                format = stream.getFormat();
                info = new DataLine.Info(Clip.class, format);
                clip = (Clip) AudioSystem.getLine(info);
                clip.open(stream);
                clip.start();
            } catch (UnsupportedAudioFileException | IOException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_helpAudioButtonActionPerformed

    // This is the action listener for when the "Get Security Question" button is pressed
    private void getquestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getquestionButtonActionPerformed
        
        // A try/catch block to retrieve data from the database
        try {
            
            // Database Driver
            Class.forName(dbClassName);
        
            // user/pwd to connect to DB
            Properties p = new Properties();
            p.put("user","GermsAdmin");
            p.put("password","g3rm5p0w3ru53r");
        
            // DB connection
            Connection conn = DriverManager.getConnection(CONNECTION,p);  
        
            // Get username from the textfield
            user = usernameTextField.getText();  
            
            // Get username and password from database
            Statement stmt = conn.createStatement();
            String sql = "SELECT * FROM accounts a JOIN securityquestion s"
                    + " ON a.secID = s.secID WHERE a.accUser = '" + user + "'";
            ResultSet rs = stmt.executeQuery(sql);
        
            //if user exists, get all fields associate to that user from table
            if (rs.next() == true) {
                
                // Stores the information of the user from the database
                id = rs.getString("accUser");
                securityquestion = rs.getString("s.secQuestion");
                securityanswer = rs.getString("a.secAnswer");
                password = rs.getString("a.accpassword");
                String key = rs.getString("secretKey");
                
                // Converts the key from the db to a byte array so it can be converted to a SecretyKey for decryption
                byte[] decodedKey = Base64.getDecoder().decode(key);
            
                // Convert the pasword key from byte[] to SecretKey so it can be decrypted
		SecretKey secretKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
                
                // Encryptor class
                EncryptionDecryptionAES encryptor = new EncryptionDecryptionAES();
                
                // Decrypt the password
                try {
                    
                    // Decrypts the pass from the db
                    password = encryptor.decrypt(password, secretKey);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                
                // Sets the text of the security question textfield
                securityquestionTextField.setText(securityquestion);
                
                // Sets the variable to true
                usernameExists = true;
                
            // Else if the user does not exist then display a message
            } else {
                
                // Display's a message
                JOptionPane.showMessageDialog(null, user + " user not found.", "User", JOptionPane.INFORMATION_MESSAGE);
                
                // Sets the variable to false
                usernameExists = false;
                
            }

        } catch (ClassNotFoundException e) {

        } catch (SQLException e) {

        }
        
    }//GEN-LAST:event_getquestionButtonActionPerformed

    // This is the action listener for the "Get Password" button
    private void getpasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getpasswordButtonActionPerformed

        // If the user is a blank string "" then display a message
        if (user.equals("") || !usernameExists) {
            
            // Then display a message
            JOptionPane.showMessageDialog(null, "You must enter a valid username first, then click the Get Security Question button.", "Get Password", JOptionPane.INFORMATION_MESSAGE);

        // Else if the user is not blank
        } else {
            
            // If the security answer is the same as what is stored in the database
            if(securityanswer.equals(securityanswerTextField.getText())){

                // Then display a message with the password of the user
                JOptionPane.showMessageDialog(null, "Your password is: " + password, "Password", JOptionPane.INFORMATION_MESSAGE);

            // Else if the security answer is incorrect
            } else {

                // Then display a message
                JOptionPane.showMessageDialog(null, "Wrong Answer", "Answer", JOptionPane.INFORMATION_MESSAGE);

            }            
            
        }
        
    }//GEN-LAST:event_getpasswordButtonActionPerformed

    // This method is called when the forgot password screen is closed
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        
        // Sets the isForgotPasswordScreenOpen variable to false
        main.setIsForgotPasswordScreenOpen(false);
        
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getpasswordButton;
    private javax.swing.JButton getquestionButton;
    private javax.swing.JButton helpAudioButton;
    private javax.swing.JTextField securityanswerTextField;
    private javax.swing.JTextField securityquestionTextField;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JLabel usernameLabel1;
    private javax.swing.JLabel usernameLabel2;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}